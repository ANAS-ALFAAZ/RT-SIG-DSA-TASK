QUES 1. --------------------------------------------------------------------------------------

class Solution {
public:
    vector<int> twoSum(vector<int>& nums, int target) {
        for(int i=0; i<nums.size(); i++){
            for(int j=i+1; j<nums.size(); j++){
                if(nums[i]+nums[j]==target){
                return{i,j};
                }
            }
        }
       return{}; 
    }
    
};

QUES 2. ------------------------------------------------------------------------------------

class Solution {
public:
    void sortColors(vector<int>& nums) {

        int low = 0;
        int mid = 0;
        int high = nums.size()-1;

        while(mid<=high){
            switch(nums[mid]){

                case 0 : swap(nums[low++], nums[mid++]); break;
                case 1 : mid++; break;
                case 2 : swap(nums[mid], nums[high--]); break;
            }

            }

            
        

        
    }
};

QUES 3. --------------------------------------------------------------------------------

class Solution {
public:
    int singleNumber(vector<int>& nums) {

        sort(nums.begin(), nums.end());
        for(int i=1; i<nums.size(); i+=2){

            if(nums[i]!= nums[i-1])
            return nums[i-1];

        }

        return nums[nums.size()-1];

    
       
    }
};

QUES 4. ----------------------------------------------------------------------------------

class Solution {
public:
    int majorityElement(vector<int>& nums) {
        sort(nums.begin(), nums.end());
        return nums[(nums.size()-1)/2];

        
    }
};

QUES 5. ------------------------------------------------------------------------------------

class Solution {
public:
    bool containsDuplicate(vector<int>& nums) {
        

        sort(nums.begin(), nums.end());
         bool flag = false;

        for(int i=0; i<nums.size()-1; i++){
        if(nums[i]==nums[i+1])
        return true;
        }
        return flag;
    }
};

--------------------------------------------------------------------------x--------------------------------------------------------------------------------




